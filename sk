#!/usr/bin/env python3

import threading
import os,sys
import time
import argparse
import readline     # interactive mode history at input()
import logging
import queue
from queue import Queue
from pathlib import Path
from datetime import datetime, timezone, timedelta
from typing import Optional

import serial
from serial import SerialException
from serial.tools.list_ports import comports

formatter_info = logging.Formatter('%(message)s')
formatter_debug = logging.Formatter('%(levelname)5s %(module)3s.%(funcName)-10s %(lineno)3s %(message)s')

logger = logging.getLogger('serialkiller')
logger.setLevel(logging.DEBUG)

streamhandler = logging.StreamHandler(sys.stdout)
streamhandler.setLevel(logging.DEBUG)
logger.addHandler(streamhandler)

# TODO auto coloring of configurabel strings (ERROR,INFO,DEBUG)
#      this is difficult (impossible) since we con't write words to display but chars
# FIXME TCP is now broken
# TODO receiving after sending is super slow
# TODO Tie lockfile to specific instance so we can run/lock multiple instances at the same time
#       When only one instance is running, default to this instance


LOCK_PATH = Path('/tmp/serialkiller.lock')
HISTORY_PATH = Path('/tmp/sk_history.txt')

# Try to connect to ports that match these strings first
PREFER_PORTS = ["USB", "ACM"]

PRINTABLE_TO_CCHAR_MAP = {
    "\\n" : "\n",       # newline
    "\\r" : "\r",       # carriage return
    "\\t" : "\t",       # horizontal tab
    "\\b" : "\b",       # backspace
    "\\v" : "\v",       # vertical tab
}

CCHAR_TO_PRINTABLE_MAP = {
    "\n" : "\\n",
    "\r" : "\\r",
    "\t" : "\\t",
    "\b" : "\\b",
    "\v" : "\\v",
}

COLORS = {
    'black':    '\033[0;30m',
    'bblack':   '\033[1;30m',
    'red':      '\033[0;31m',
    'bred':     '\033[1;31m',
    'green':    '\033[0;32m',
    'bgreen':   '\033[1;32m',
    'yellow':   '\033[0;33m',
    'byellow':  '\033[1;33m',
    'blue':     '\033[0;34m',
    'bblue':    '\033[1;34m',
    'magenta':  '\033[0;35m',
    'bmagenta': '\033[1;35m',
    'cyan':     '\033[0;36m',
    'bcyan':    '\033[1;36m',
    'white':    '\033[0;37m',
    'bwhite':   '\033[1;37m',
    'reset':    '\033[0m',
    'default':  '\033[0m'
}

COLOR_MAP = {
    "debug" : COLORS["white"],
    "info"  : COLORS["green"],
    "error" : COLORS["red"]
}


def colorize(string: str, color: str) -> str:
    return COLORS[color] + string + COLORS["reset"]


class LockFile():
    """ Implements a lock by watching a file. If file exists, disconnect all traffic over serial port to free it up
        for another process to use. Reconnect when file is deleted. """
    def __init__(self, path: Path):
        self._lockfile = path

    def is_locked(self) -> Optional[bool]:
        if self._lockfile.is_file():
            time.sleep(.05)
            return True

    def toggle(self):
        if self._lockfile.is_file():
            self.unlock()
        else:
            self.lock()

    def lock(self):
        self._lockfile.touch()
        logger.info(f"Created lockfile: {self._lockfile}")

    def unlock(self):
        if self._lockfile.is_file():
            self._lockfile.unlink()
            logger.info(f"Removed lockfile: {self._lockfile}")
        else:
            logger.error('Serialkiller is not locked')


class ConnBaseClass(threading.Thread, LockFile):
    """ Handles all things that have something to do with the serial connection.
        Since serial connection can either send or receive, not both at the same time,
          a set_lock_recv() signal must be send, that frees up serial connection for sending.
        Another lock is implemented that locks both sending and receiving. (--lock|--unlock) It can be triggered
          by an external command and frees up the serial port for another process to use.
          This can be beneficial when, for example, the user wants to upload new code to an MCU
          while keeping an eye on the serial monitor.
    """
    def __init__(self, rq: Queue, wq: Queue, timeout: int):
        threading.Thread.__init__(self)

        LockFile.__init__(self, Path(LOCK_PATH))
        self._stopped: bool = False

        # read and write queue
        self._rq = rq
        self._wq = wq

        self.timeout = timeout

        # holds serial connection object
        self.ser: Optional[serial.Serial] = None

        # it is impossible to detect broken connections so this indicates a reconnection try
        self.needs_reconnect: bool = False


    def connect(self) -> Optional[serial.Serial]:
        """ Needs to be implemented when subclassing and return a serial connection instance """

    def is_alive(self) -> bool:
        return self.ser != None

    def stop(self):
        logger.debug("Stopping connection manager thread")
        self._stopped = True

    def is_stopped(self):
        return self._stopped

    def recv_chr(self):
        # receive a single character
        if self.ser == None:
            return
        if not self.ser.is_open:
            return
        if self.is_locked():
            return

        try:
            c = self.ser.read().decode()
            if c:
                self._rq.put(c)
                return c

        except UnicodeDecodeError as e:
            logger.error(e)
        except SerialException as e:
            self.needs_reconnect = True

    def send(self):
        # send a line from queue
        if self.ser == None:
            return
        if not self.ser.is_open:
            return
        if self.is_locked():
            return

        while not self._wq.empty():
            msg = self._wq.get()
            msg = msg + "\n"
            self.ser.write(msg.encode())
            self.ser.flush()

    def close(self):
        if self.ser != None:
            self.ser.close()

    def run(self):
        logger.debug("Starting connection manager thread")

        while not self._stopped:
            if self.is_locked():
                if self.ser and self.ser.is_open:
                    logger.info("Serialkiller is locked")
                    self.close()

            else:
                # FIXME if in reconnect cycle and program is locked,
                #       program will not free the serial port, it should be freed
                if self.needs_reconnect or self.ser == None or not self.ser.is_open:
                    self.connect()

                # send messages in queue
                self.send()

                # receive chars and put in queue
                self.recv_chr()

            # NOTE no sleep needed here because the timeout in recv_chr() takes care of that
        self.close()


class SerialConnThread(ConnBaseClass):
    def __init__(self, rq: Queue, wq: Queue, ports: list[str], baudrate: int, timeout: int):
        ConnBaseClass.__init__(self, rq, wq, timeout)

        self._ports = ports
        self._baudrate = baudrate

        # this will be the port after successfull first connection
        self._port: Optional[str] = None

    def _connect_serial(self, port: str, show_error: bool=True) -> Optional[serial.Serial]:
        """ Create connection over Serial port """
        try:
            self.ser = serial.Serial(port, self._baudrate, timeout=self.timeout, exclusive=True)
            logger.info(f"Connected to {port} @ {self._baudrate} | Exit using CTRL+C")

            # save serial connection info so we can reconnect quicker
            self._port = port
            self.needs_reconnect = False
            return self.ser
        except SerialException as e:
            if show_error:
                logger.error(e)

    def _reconnect(self) -> Optional[serial.Serial]:
        """ Connection has been established before.
            Keep trying to reconnect """
        assert(self._port)
        self.close()
        logger.info("Attempting to reconnect...")
        while self.ser and not self.ser.is_open:
            if self._connect_serial(self._port, show_error=False):
                return self.ser
            time.sleep(0.1)

    def connect(self) -> Optional[serial.Serial]:
        # try all ports in list, NOTE discovery is somehow super slow from thread
        if self._port != None:
            return self._reconnect()

        for port in self._ports:
            logger.info(f"Trying to connect to {port}")
            if self._connect_serial(port):
                return self.ser
        else:
            logger.error("No serial ports found")
            self.stop()


# FIXME!!!
#class TCPConnThread(ConnBaseClass):
#    def __init__(self):
#        ConnBaseClass.__init__()
#
#        self.url = None
#
#    def connect(self, url, timeout=1) -> Optional[serial.Serial]:
#        # Create connection over TCP
#        try:
#            self.ser =  serial.serial_for_url(url, timeout=timeout)
#            logger.info(f"Connected to {url} | Exit using CTRL+C")
#            self.url = url
#            return self.ser
#        except SerialException as e:
#            logger.error(e)


class ReaderThread(threading.Thread):
    """ Reads data from the connection an prints it to STDOUT and optionally to a file """
    def __init__(self, rq: Queue, log_file_path: Optional[Path], do_print_cchars: str):
        threading.Thread.__init__(self)
        self.log_file_path = log_file_path
        self._rq = rq
        self._do_print_cchars = do_print_cchars
        self.stopped: bool = False

    def stop(self):
        logger.debug("Stopping reader thread")
        self.stopped = True

    def _write_to_log_file(self, data: str):
        assert(self.log_file_path)
        dt = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
        with open(self.log_file_path, 'a') as f:
            f.write(f"{dt} {data}\n")

    def run(self):
        logger.debug("Starting reader thread")
        buf = ""

        while not self.stopped:

            while not self._rq.empty():

                c = self._rq.get()

                if c == None:
                    continue

                if c == '\n':
                    if buf and self.log_file_path:
                        self._write_to_log_file(buf)
                    buf = ""

                elif c:
                    if not buf:
                        print(colorize('< ', 'bgreen'), end='', flush=True)

                    buf += c

                else:
                    logger.error(f"Received weird things: >{c}<")
                    continue

                # convert control chars (\n, \t, etc...) 
                if self._do_print_cchars:
                    if c in CCHAR_TO_PRINTABLE_MAP.keys():
                        print(colorize(CCHAR_TO_PRINTABLE_MAP[c], "bmagenta"), end='', flush=True)
                        if c == '\n':
                            print()
                    else:
                        print(c, end='', flush=True)
                else:
                    print(c, end='', flush=True)

            time.sleep(0.1)


class InputBaseClass(LockFile):
    """ Handles the way data is retrieved from either user, STDIN or whatever before it is sent over the serial connection """
    def __init__(self, wq: Queue, history_path: Path):
        LockFile.__init__(self, Path(LOCK_PATH))
        self.history_path = history_path
        self._wq = wq


class InputUser(InputBaseClass):
    """ Handles user input """
    def __init__(self, wq: Queue, history_path: Path, do_send_newline: bool):
        super().__init__(wq, history_path)
        self.do_send_newline = do_send_newline

    def highlight_cchars(self, data: str):
        """ Highlight control chars. eg: \n, \t, etc. """
        for c in data:
            if c in CCHAR_TO_PRINTABLE_MAP.keys():
                print(colorize(CCHAR_TO_PRINTABLE_MAP[c], "bmagenta"), end='', flush=True)
            else:
                print(c, end='', flush=True)
        print()

    def get_input(self):
        logger.debug("Starting reading from user input")
        while True:
            data = input()
            readline.write_history_file(self.history_path)

            if data and not self.is_locked():

                # input() doesn't allow direct input of control chars so we must convert them. eg: \\n -> \n
                for pc, cc in PRINTABLE_TO_CCHAR_MAP.items():
                    data = data.replace(pc, cc)

                if self.do_send_newline:
                    data += "\n"

                self._wq.put(data)
                print(colorize('> ', 'bmagenta'), end='')
                self.highlight_cchars(data)

            # toggle lock on enter
            elif (not data):
                self.toggle()


class SerialKiller(LockFile):
    """ Main application class, starts/stops connection and reader threads and enters an input loop """
    def __init__(self):
        LockFile.__init__(self, LOCK_PATH)

        # readline lib will use this file to read/write history
        self._history_path: Path = HISTORY_PATH
        try:
            readline.read_history_file(self._history_path)
        except FileNotFoundError:
            pass

        self._rq: Queue = Queue()
        self._wq: Queue = Queue()

        self.log_file_path: Optional[Path] = None

    def stop_threads(self):
        self.reader_thread.stop()
        self.conn_manager_thread.stop()
        self.reader_thread.join()
        self.conn_manager_thread.join()

    def sort_ports(self, ports: list[str], filters: list[str]):
        """ Sort port list by multiple filters """
        for f in reversed(filters):
            ports = [p for p in ports if f in p] + [p for p in ports if not f in p]
        return ports

    def parse_args(self):
        parser = argparse.ArgumentParser(description='SerialKiller does serial things.')
        parser.add_argument('-p', '--port',           help="default: autodetect", default=None)
        parser.add_argument('-b', '--baudrate',       help="default: 115200", metavar='RATE', default=115200)
        parser.add_argument('-U', '--url',            help="url eg: socket://host:port", default=None)
        parser.add_argument('-t', '--timeout',        help="default: 0.1", metavar='SEC', default=0.1)
        parser.add_argument('-P', '--print_cchars',   help="convert incoming control chars to printable", action='store_true')
        parser.add_argument('-N', '--send_newline',   help="send newline on enter", action='store_true')
        parser.add_argument('-L', '--log_dir',        help="specify log dir", metavar='DIR', type=Path)
        parser.add_argument('-l', '--lock',           help="free serial port", action='store_true')
        parser.add_argument('-u', '--unlock',         help="reconnect to serial", action='store_true')

        parser.add_argument('-D', '--debug',          help="enable debugging", action='store_true')
        args = parser.parse_args()

        port = args.port
        self._baudrate = args.baudrate
        self._timeout = args.timeout
        self._do_print_cchars = args.print_cchars
        self._do_send_newline = args.send_newline
        self._debug = args.debug
        self._url = args.url
        self._do_lock = args.lock
        self._do_unlock = args.unlock
        log_dir: Path = args.log_dir

        if args.debug:
            logger.setLevel(logging.DEBUG)
            streamhandler.setFormatter(formatter_debug)
        else:
            logger.setLevel(logging.INFO)
            streamhandler.setFormatter(formatter_info)

        # only do port discovery if no url is given
        if not self._url:
            # discover available ports if no port is supplied on CLI
            ports = [port] if port else [dev.device for dev in comports(include_links=True)]
            self._ports = self.sort_ports(ports, PREFER_PORTS)

            for port in self._ports:
                logger.debug(f"Found serial port: {port}")

        if log_dir:
            if not log_dir.is_dir():
                logger.error('Log directory doesn\'t exist, disabling logging')
                sys.exit()

            self.log_file_path = (log_dir / datetime.now().strftime('%Y-%m-%d_%H_%M_%S')).with_suffix('.log')
            logger.info(f"Logging to file: {self.log_file_path}")

    def wait_for_connection(self, thread):
        """ Loop until connection is confirmed or thread is stopped """
        while not thread.is_stopped():
            if thread.is_alive():
                return True

    def run(self):
        self.parse_args()

        # check if user wants to free up serial port
        if self._do_lock:
            self.lock()
            return
            
        if self._do_unlock:
            self.unlock()
            return

        if self.is_locked():
            logger.info("Serialkiller is already locked, use --unlock first")
            while self.is_locked():
                pass

        self.conn_manager_thread = SerialConnThread(self._rq, self._wq, self._ports, self._baudrate, self._timeout)
        self.conn_manager_thread.start()
        self.reader_thread = ReaderThread(self._rq, self.log_file_path, self._do_print_cchars)
        self.reader_thread.start()

        # wait for initial connection. exit on fail
        if not self.wait_for_connection(self.conn_manager_thread):
            self.stop_threads()
            return

        ic = InputUser( self._wq,
                        self._history_path,
                        self._do_send_newline)

        # enter input loop
        try:
            ic.get_input()
        except KeyboardInterrupt:
            logger.debug("Received keyboard interrupt")
        except SerialException as e:
            logger.error(e)

        self.stop_threads()


if __name__ == "__main__":
    sk = SerialKiller()
    sk.run()
